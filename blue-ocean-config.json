{
  "pipeline": {
    "name": "Redis Infrastructure Pipeline",
    "description": "Automated Redis cluster deployment on AWS with Terraform and Ansible",
    "repository": {
      "type": "github",
      "url": "https://github.com/Shivik0505/New_Redis.git",
      "branch": "master"
    },
    "jenkinsfile": "Jenkinsfile.blueocean",
    "triggers": {
      "scm_polling": {
        "schedule": "H/5 * * * *",
        "description": "Poll SCM every 5 minutes for changes"
      }
    },
    "parameters": [
      {
        "name": "autoApprove",
        "type": "boolean",
        "default": true,
        "description": "Automatically run apply after generating plan?"
      },
      {
        "name": "action",
        "type": "choice",
        "choices": ["apply", "destroy"],
        "default": "apply",
        "description": "Select the action to perform"
      },
      {
        "name": "keyPairName",
        "type": "string",
        "default": "redis-infra-key",
        "description": "AWS Key Pair name to use"
      },
      {
        "name": "recreateKeyPair",
        "type": "boolean",
        "default": false,
        "description": "Force recreate key pair if it exists?"
      },
      {
        "name": "skipAnsible",
        "type": "boolean",
        "default": false,
        "description": "Skip Ansible configuration step?"
      }
    ],
    "environment": {
      "AWS_DEFAULT_REGION": "ap-south-1",
      "TF_IN_AUTOMATION": "true",
      "TF_INPUT": "false"
    },
    "stages": [
      {
        "name": "üöÄ Initialize",
        "parallel": true,
        "stages": [
          {
            "name": "üì• Clone Repository",
            "description": "Checkout source code and display commit information"
          },
          {
            "name": "üîç Pre-flight Checks",
            "description": "Validate AWS credentials and check service limits"
          }
        ]
      },
      {
        "name": "üîë Setup Key Pair",
        "description": "Create or validate AWS key pair for SSH access",
        "condition": "params.action == 'apply'"
      },
      {
        "name": "üèóÔ∏è Infrastructure Planning",
        "description": "Run terraform plan to preview infrastructure changes"
      },
      {
        "name": "üöÄ Deploy Infrastructure",
        "description": "Apply terraform plan to create AWS resources",
        "condition": "params.autoApprove && params.action == 'apply'"
      },
      {
        "name": "üí• Destroy Infrastructure",
        "description": "Destroy AWS infrastructure and cleanup resources",
        "condition": "params.autoApprove && params.action == 'destroy'"
      },
      {
        "name": "‚è≥ Wait for Infrastructure",
        "description": "Wait for EC2 instances to be ready and SSH accessible",
        "condition": "params.autoApprove && params.action == 'apply'"
      },
      {
        "name": "‚öôÔ∏è Configure Redis",
        "description": "Run Ansible playbook to install and configure Redis cluster",
        "condition": "params.autoApprove && params.action == 'apply' && !params.skipAnsible"
      },
      {
        "name": "‚úÖ Verification & Reporting",
        "parallel": true,
        "stages": [
          {
            "name": "üîç Post-Deployment Verification",
            "description": "Verify deployed infrastructure and services"
          },
          {
            "name": "üìã Generate Connection Guide",
            "description": "Create connection guide with SSH commands and IPs"
          }
        ],
        "condition": "params.autoApprove && params.action == 'apply'"
      }
    ],
    "artifacts": [
      "terraform/tfplan",
      "terraform-outputs.json",
      "connection-guide.txt",
      "*.pem",
      "terraform/terraform.tfstate*"
    ],
    "notifications": {
      "success": {
        "message": "‚úÖ Redis infrastructure deployed successfully!",
        "description": "Check artifacts for connection guide and SSH keys"
      },
      "failure": {
        "message": "‚ùå Pipeline failed!",
        "description": "Check logs for error details and cleanup any partial resources"
      }
    }
  }
}
