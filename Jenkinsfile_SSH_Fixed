pipeline {
    agent any

    triggers {
        pollSCM('H/5 * * * *')
    }

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: true, description: 'Automatically run apply after generating plan?')
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
        string(name: 'keyPairName', defaultValue: 'redis-infra-key', description: 'AWS Key Pair name to use')
        booleanParam(name: 'recreateKeyPair', defaultValue: false, description: 'Force recreate key pair if it exists?')
        booleanParam(name: 'skipAnsible', defaultValue: false, description: 'Skip Ansible configuration step?')
    }

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        KEY_PAIR_NAME = "${params.keyPairName}"
        TF_IN_AUTOMATION = 'true'
        TF_INPUT = 'false'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_SSH_RETRIES = '3'
        ANSIBLE_TIMEOUT = '60'
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "=== Cloning Repository ==="
                checkout scm
                
                script {
                    def commitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def commitMsg = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    def commitAuthor = sh(returnStdout: true, script: 'git log -1 --pretty=%an').trim()
                    
                    echo "Commit ID: ${commitId}"
                    echo "Commit Message: ${commitMsg}"
                    echo "Commit Author: ${commitAuthor}"
                }
            }
        }

        stage('Pre-flight Checks') {
            steps {
                echo "=== Pre-flight Checks ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "Checking AWS credentials..."
                        aws sts get-caller-identity
                        
                        echo "Checking AWS service limits..."
                        aws ec2 describe-account-attributes --attribute-names supported-platforms --region $AWS_DEFAULT_REGION
                        
                        echo "Checking existing resources..."
                        aws ec2 describe-vpcs --region $AWS_DEFAULT_REGION --query 'Vpcs[?Tags[?Key==`Name` && Value==`redis-VPC`]]' --output table || true
                    '''
                }
            }
        }

        stage('Setup Key Pair') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        sh '''
                            echo "=== Key Pair Setup ==="
                            echo "Using key pair name: $KEY_PAIR_NAME"
                            
                            # Check if key pair exists
                            if aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
                                echo "Key pair '$KEY_PAIR_NAME' exists in AWS"
                                
                                if [ "$recreateKeyPair" = "true" ]; then
                                    echo "Recreating key pair as requested..."
                                    aws ec2 delete-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION
                                    echo "Creating new key pair '$KEY_PAIR_NAME'..."
                                    aws ec2 create-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION --query 'KeyMaterial' --output text > "${KEY_PAIR_NAME}.pem"
                                    chmod 400 "${KEY_PAIR_NAME}.pem"
                                    echo "New key pair created successfully!"
                                else
                                    echo "Using existing key pair. Note: .pem file not available in Jenkins."
                                fi
                            else
                                echo "Creating new key pair '$KEY_PAIR_NAME'..."
                                aws ec2 create-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION --query 'KeyMaterial' --output text > "${KEY_PAIR_NAME}.pem"
                                chmod 400 "${KEY_PAIR_NAME}.pem"
                                echo "Key pair created successfully!"
                            fi
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "=== Terraform Init ==="
                        cd terraform/
                        terraform init -input=false

                        echo "=== Terraform Validate ==="
                        terraform validate

                        echo "=== Terraform Plan ==="
                        terraform plan -input=false -out=tfplan -detailed-exitcode || {
                            exit_code=$?
                            if [ $exit_code -eq 2 ]; then
                                echo "Changes detected in plan"
                                exit 0
                            else
                                echo "Plan failed with exit code $exit_code"
                                exit $exit_code
                            fi
                        }
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'terraform/tfplan', allowEmptyArchive: true
                }
            }
        }

        stage('Terraform Apply/Destroy') {
            when {
                expression { return params.autoApprove }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        if (params.action == 'apply') {
                            sh '''
                                echo "=== Terraform Apply ==="
                                cd terraform/
                                terraform apply -input=false tfplan
                                
                                echo "=== Deployment Summary ==="
                                terraform output -json > ../terraform-outputs.json
                                terraform output
                            '''
                        } else if (params.action == 'destroy') {
                            sh '''
                                echo "=== Terraform Destroy ==="
                                cd terraform/
                                terraform destroy -input=false --auto-approve
                                
                                echo "=== Cleanup Key Pair ==="
                                if aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
                                    echo "Deleting key pair '$KEY_PAIR_NAME'..."
                                    aws ec2 delete-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION
                                    echo "Key pair deleted"
                                fi
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        if (params.action == 'apply' && fileExists('terraform-outputs.json')) {
                            archiveArtifacts artifacts: 'terraform-outputs.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Wait for Infrastructure') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                echo "=== Waiting for infrastructure to be ready ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "Waiting for instances to be running..."
                        sleep 60
                        
                        echo "Checking instance status..."
                        aws ec2 describe-instances \
                            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=redis-*" \
                            --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value|[0],State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo "Waiting additional time for SSH to be ready..."
                        sleep 60
                    '''
                }
            }
        }

        stage('SSH Connectivity & Ansible Configuration') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                    expression { return !params.skipAnsible }
                }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "=== SSH Connectivity & Ansible Configuration ==="
                        
                        # Check if key file exists (created in this pipeline run)
                        if [ -f "${KEY_PAIR_NAME}.pem" ]; then
                            chmod 400 "${KEY_PAIR_NAME}.pem"
                            echo "✅ SSH key file found and permissions set"
                        else
                            echo "⚠️ SSH key file ${KEY_PAIR_NAME}.pem not found."
                            echo "This might happen if using an existing key pair."
                            echo "Attempting to continue with SSH connectivity testing..."
                        fi
                        
                        # Use improved inventory creation
                        echo "📋 Creating improved inventory..."
                        if [ -f "create-inventory-improved.sh" ]; then
                            chmod +x create-inventory-improved.sh
                            ./create-inventory-improved.sh
                        else
                            echo "⚠️ Improved inventory script not found, using original..."
                            chmod +x create-inventory.sh
                            ./create-inventory.sh
                        fi
                        
                        # Test SSH connectivity before running Ansible
                        echo "🔗 Testing SSH connectivity..."
                        if [ -f "test-ssh-connectivity.sh" ]; then
                            chmod +x test-ssh-connectivity.sh
                            timeout 300 ./test-ssh-connectivity.sh || {
                                echo "❌ SSH connectivity test failed"
                                echo "Attempting to diagnose issues..."
                                
                                # Get current IPs for debugging
                                PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-public" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
                                echo "Bastion IP: $PUBLIC_IP"
                                
                                # Check security groups
                                echo "Checking security groups..."
                                aws ec2 describe-security-groups --region $AWS_DEFAULT_REGION --filters "Name=group-name,Values=*redis*" --query 'SecurityGroups[].{GroupName:GroupName,Rules:IpPermissions[?FromPort==`22`]}' --output table
                                
                                echo "⚠️ SSH connectivity issues detected. Continuing with limited functionality..."
                            }
                        else
                            echo "⚠️ SSH test script not found, proceeding with Ansible..."
                        fi
                        
                        # Set up Ansible environment
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        export ANSIBLE_SSH_RETRIES=3
                        export ANSIBLE_TIMEOUT=60
                        
                        # Determine which inventory to use
                        if [ -f "inventory_fixed.ini" ]; then
                            INVENTORY="inventory_fixed.ini"
                            echo "✅ Using fixed inventory: $INVENTORY"
                        elif [ -f "inventory.ini" ]; then
                            INVENTORY="inventory.ini"
                            echo "✅ Using standard inventory: $INVENTORY"
                        else
                            echo "❌ No inventory file found"
                            exit 1
                        fi
                        
                        # Test Ansible connectivity
                        echo "🧪 Testing Ansible connectivity..."
                        ansible all -i $INVENTORY -m ping --timeout=30 -v || {
                            echo "⚠️ Initial Ansible connectivity test failed"
                            echo "Attempting with debug playbook..."
                            
                            if [ -f "playbook-debug.yml" ]; then
                                echo "Running debug playbook..."
                                ansible-playbook -i $INVENTORY playbook-debug.yml --timeout=60 -v || {
                                    echo "❌ Debug playbook also failed"
                                    echo "Manual intervention may be required"
                                }
                            fi
                        }
                        
                        # Run main Ansible playbook
                        echo "🚀 Running Ansible playbook..."
                        if [ -f "playbook-minimal.yml" ]; then
                            PLAYBOOK="playbook-minimal.yml"
                            echo "Using minimal playbook for testing"
                        else
                            PLAYBOOK="playbook.yml"
                            echo "Using main playbook"
                        fi
                        
                        ansible-playbook -i $INVENTORY $PLAYBOOK --timeout=120 -v || {
                            echo "⚠️ First attempt failed, retrying with increased timeout..."
                            sleep 30
                            ansible-playbook -i $INVENTORY $PLAYBOOK --timeout=180 -vv || {
                                echo "❌ Ansible playbook execution failed after retry"
                                echo "📋 Troubleshooting information:"
                                echo "- Check SSH connectivity to bastion host"
                                echo "- Verify security group rules allow SSH access"
                                echo "- Ensure instances are fully booted and SSH service is running"
                                echo "- Check if the SSH key is correct and has proper permissions"
                                
                                # Don't fail the entire pipeline for Ansible issues
                                echo "⚠️ Continuing pipeline despite Ansible configuration issues"
                                echo "Manual configuration may be required"
                            }
                        }
                        
                        echo "✅ Ansible configuration stage completed"
                    '''
                }
            }
            post {
                always {
                    script {
                        // Archive all relevant files
                        if (fileExists('inventory.ini')) {
                            archiveArtifacts artifacts: 'inventory.ini', allowEmptyArchive: true
                        }
                        if (fileExists('inventory_fixed.ini')) {
                            archiveArtifacts artifacts: 'inventory_fixed.ini', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Post-Deployment Verification') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "=== Post-Deployment Verification ==="
                        
                        echo "Checking deployed instances..."
                        aws ec2 describe-instances \
                            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=redis-*" \
                            --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value|[0],State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,InstanceType:InstanceType}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "Checking VPC and networking..."
                        aws ec2 describe-vpcs \
                            --filters "Name=tag:Name,Values=redis-VPC" \
                            --query 'Vpcs[].{VpcId:VpcId,CidrBlock:CidrBlock,State:State}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "Checking security groups..."
                        aws ec2 describe-security-groups \
                            --filters "Name=group-name,Values=*redis*" \
                            --query 'SecurityGroups[].{GroupName:GroupName,GroupId:GroupId,Description:Description}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "=== Deployment Complete! ==="
                        echo "Key Pair Used: $KEY_PAIR_NAME"
                        echo "Region: $AWS_DEFAULT_REGION"
                        echo "Deployment Time: $(date)"
                    '''
                }
            }
        }

        stage('Generate Connection Guide') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                script {
                    sh '''
                        echo "=== Connection Guide ==="
                        
                        # Get public IP from terraform output or AWS CLI
                        if [ -f "terraform-outputs.json" ]; then
                            PUBLIC_IP=$(jq -r '.["public-instance-ip"].value' terraform-outputs.json 2>/dev/null || echo "")
                            PRIVATE_IP_1=$(jq -r '.["private-instance1-ip"].value' terraform-outputs.json 2>/dev/null || echo "")
                            PRIVATE_IP_2=$(jq -r '.["private-instance2-ip"].value' terraform-outputs.json 2>/dev/null || echo "")
                            PRIVATE_IP_3=$(jq -r '.["private-instance3-ip"].value' terraform-outputs.json 2>/dev/null || echo "")
                        else
                            PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-public" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
                            PRIVATE_IPS=($(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-private*" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PrivateIpAddress' --output text))
                            PRIVATE_IP_1=${PRIVATE_IPS[0]}
                            PRIVATE_IP_2=${PRIVATE_IPS[1]}
                            PRIVATE_IP_3=${PRIVATE_IPS[2]}
                        fi
                        
                        # Create connection guide
                        cat > connection-guide.txt << EOF
Redis Infrastructure Connection Guide
=====================================

Deployment Details:
- Key Pair: ${KEY_PAIR_NAME}
- Region: ${AWS_DEFAULT_REGION}
- Deployment Time: $(date)

Instance Details:
- Bastion Host (Public): ${PUBLIC_IP}
- Redis Node 1 (Private): ${PRIVATE_IP_1}
- Redis Node 2 (Private): ${PRIVATE_IP_2}
- Redis Node 3 (Private): ${PRIVATE_IP_3}

Connection Commands:
1. Connect to Bastion Host:
   ssh -i ${KEY_PAIR_NAME}.pem ubuntu@${PUBLIC_IP}

2. Connect to Redis Nodes (via Bastion):
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IP_1}
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IP_2}
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IP_3}

3. Test SSH Connectivity:
   # Test direct connection to bastion
   ssh -i ${KEY_PAIR_NAME}.pem -o ConnectTimeout=10 ubuntu@${PUBLIC_IP} "echo 'Bastion SSH OK'"
   
   # Test connection through bastion to Redis nodes
   ssh -i ${KEY_PAIR_NAME}.pem -o ProxyCommand="ssh -W %h:%p -i ${KEY_PAIR_NAME}.pem ubuntu@${PUBLIC_IP}" ubuntu@${PRIVATE_IP_1} "echo 'Redis Node 1 SSH OK'"

4. Configure Redis Cluster (if not done by Ansible):
   # On each Redis node:
   sudo apt update && sudo apt install redis-server -y
   
   # Edit Redis config:
   sudo nano /etc/redis/redis.conf
   # Uncomment: cluster-enabled yes
   # Uncomment: cluster-config-file nodes.conf
   # Uncomment: cluster-node-timeout 5000
   
   # Restart Redis:
   sudo systemctl restart redis-server
   
   # Create cluster (run from any node):
   redis-cli --cluster create ${PRIVATE_IP_1}:6379 ${PRIVATE_IP_2}:6379 ${PRIVATE_IP_3}:6379 --cluster-replicas 0

Troubleshooting:
- If SSH fails, check security group rules for port 22
- Ensure the SSH key file has correct permissions (400)
- Verify instances are in running state
- Check that bastion host is accessible from your location

Next Steps:
- Download the ${KEY_PAIR_NAME}.pem file from Jenkins artifacts
- Use the connection commands above to access your infrastructure
- Configure Redis clustering as needed
- Set up monitoring and backups

EOF
                        
                        echo "Connection guide created:"
                        cat connection-guide.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'connection-guide.txt', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            script {
                // Archive key file if created (for download)
                if (fileExists("${params.keyPairName}.pem")) {
                    archiveArtifacts artifacts: "${params.keyPairName}.pem", allowEmptyArchive: true
                }
                
                // Archive Terraform state files
                if (fileExists("terraform/terraform.tfstate")) {
                    archiveArtifacts artifacts: 'terraform/terraform.tfstate*', allowEmptyArchive: true
                }
            }
            
            // Clean workspace but keep important files
            sh '''
                # Keep important files but clean temporary ones
                find . -name "*.log" -delete || true
                find . -name ".terraform" -type d -exec rm -rf {} + || true
            '''
        }
        
        failure {
            echo '❌ Pipeline failed!'
            script {
                sh '''
                    echo "=== Failure Diagnostics ==="
                    echo "Checking AWS resources that might need cleanup..."
                    
                    # Check for any resources that might have been partially created
                    aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-*" --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value|[0],State:State.Name,InstanceId:InstanceId}' --output table || true
                    
                    echo "Check the logs above for specific error details."
                    echo "You may need to run cleanup manually if resources were partially created."
                    
                    echo ""
                    echo "💡 SSH Troubleshooting Tips:"
                    echo "1. Verify SSH key permissions: chmod 400 redis-infra-key.pem"
                    echo "2. Check security group rules allow SSH (port 22)"
                    echo "3. Ensure instances are fully booted and SSH service is running"
                    echo "4. Test direct SSH to bastion host first"
                    echo "5. Verify bastion host can reach private instances"
                '''
            }
        }
        
        success {
            echo '✅ Pipeline completed successfully!'
            echo "Redis infrastructure deployed with key pair: ${params.keyPairName}"
            echo "Check the 'Generate Connection Guide' stage output for connection details."
            echo "Download the connection-guide.txt and ${params.keyPairName}.pem files from Jenkins artifacts."
        }
    }
}
