pipeline {
    agent any

    // Enable SCM polling - check for changes every 5 minutes
    triggers {
        pollSCM('H/5 * * * *')
    }

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: true, description: 'Automatically run apply after generating plan?')
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
        string(name: 'keyPairName', defaultValue: 'redis-infra-key', description: 'AWS Key Pair name to use')
        booleanParam(name: 'recreateKeyPair', defaultValue: false, description: 'Force recreate key pair if it exists?')
        booleanParam(name: 'skipAnsible', defaultValue: false, description: 'Skip Ansible configuration step?')
    }

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        KEY_PAIR_NAME = "${params.keyPairName}"
        TF_IN_AUTOMATION = 'true'
        TF_INPUT = 'false'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_SSH_RETRIES = '3'
        ANSIBLE_TIMEOUT = '60'
        ANSIBLE_CONFIG = './ansible.cfg'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo "=== SCM Checkout ==="
                checkout scm
                
                script {
                    def commitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def commitMsg = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    def commitAuthor = sh(returnStdout: true, script: 'git log -1 --pretty=%an').trim()
                    
                    echo "‚úÖ Repository checked out successfully"
                    echo "üìù Commit ID: ${commitId}"
                    echo "üìù Commit Message: ${commitMsg}"
                    echo "üìù Commit Author: ${commitAuthor}"
                }
            }
        }

        stage('Environment Validation') {
            steps {
                echo "=== Environment Validation ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "üîß Validating environment..."
                        
                        # Check AWS credentials
                        if aws sts get-caller-identity; then
                            echo "‚úÖ AWS credentials are valid"
                        else
                            echo "‚ùå AWS credentials validation failed"
                            exit 1
                        fi
                        
                        # Check required tools
                        echo "üõ†Ô∏è Checking required tools..."
                        terraform version || echo "‚ö†Ô∏è Terraform not found"
                        ansible --version || echo "‚ö†Ô∏è Ansible not found"
                        
                        # Check AWS service limits
                        echo "üìä Checking AWS service limits..."
                        aws ec2 describe-account-attributes --attribute-names supported-platforms --region $AWS_DEFAULT_REGION || echo "‚ö†Ô∏è Could not check account attributes"
                        
                        echo "‚úÖ Environment validation completed"
                    '''
                }
            }
        }

        stage('Key Pair Management') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                echo "=== Key Pair Management ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "üîë Managing key pair: $KEY_PAIR_NAME"
                        
                        create_key_pair() {
                            echo "Creating new key pair '$KEY_PAIR_NAME'..."
                            if aws ec2 create-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION --query 'KeyMaterial' --output text > "${KEY_PAIR_NAME}.pem"; then
                                chmod 400 "${KEY_PAIR_NAME}.pem"
                                echo "‚úÖ Key pair created successfully!"
                                return 0
                            else
                                echo "‚ùå Failed to create key pair"
                                return 1
                            fi
                        }
                        
                        if aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
                            echo "‚úÖ Key pair '$KEY_PAIR_NAME' exists in AWS"
                            
                            if [ "${recreateKeyPair}" = "true" ]; then
                                echo "üîÑ Recreating key pair as requested..."
                                aws ec2 delete-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION
                                create_key_pair
                            else
                                echo "‚úÖ Using existing key pair"
                            fi
                        else
                            echo "üÜï Key pair does not exist, creating new one..."
                            create_key_pair
                        fi
                    '''
                }
            }
        }

        stage('Infrastructure Provisioning') {
            steps {
                echo "=== Infrastructure Provisioning ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        dir('terraform') {
                            sh '''
                                echo "üèóÔ∏è Initializing Terraform..."
                                terraform init -input=false
                                
                                echo "‚úÖ Validating Terraform configuration..."
                                terraform validate
                            '''
                            
                            if (params.action == 'apply') {
                                sh '''
                                    echo "üìã Creating Terraform plan..."
                                    terraform plan -input=false -out=tfplan -var="key-name=${KEY_PAIR_NAME}"
                                    
                                    echo "üöÄ Applying Terraform plan..."
                                    terraform apply -input=false tfplan
                                    
                                    echo "üìä Generating outputs..."
                                    terraform output -json > ../terraform-outputs.json
                                    terraform output
                                    
                                    echo "‚úÖ Infrastructure provisioning completed"
                                '''
                            } else if (params.action == 'destroy') {
                                sh '''
                                    echo "üóëÔ∏è Destroying infrastructure..."
                                    terraform destroy -input=false -var="key-name=${KEY_PAIR_NAME}" --auto-approve
                                    
                                    echo "üßπ Cleaning up key pair..."
                                    if aws ec2 describe-key-pairs --key-names "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
                                        aws ec2 delete-key-pair --key-name "$KEY_PAIR_NAME" --region $AWS_DEFAULT_REGION
                                        echo "‚úÖ Key pair deleted"
                                    fi
                                    
                                    echo "‚úÖ Infrastructure destruction completed"
                                '''
                            }
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'terraform/tfplan', allowEmptyArchive: true
                    script {
                        if (fileExists('terraform-outputs.json')) {
                            archiveArtifacts artifacts: 'terraform-outputs.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Infrastructure Readiness') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                echo "=== Infrastructure Readiness Check ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "‚è≥ Waiting for instances to be ready..."
                        sleep 90
                        
                        echo "üìä Checking instance status..."
                        aws ec2 describe-instances \
                            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=redis-*" \
                            --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value|[0],State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        # Verify all instances are running
                        RUNNING_INSTANCES=$(aws ec2 describe-instances \
                            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=redis-*" \
                            --query 'length(Reservations[].Instances[])' \
                            --output text --region $AWS_DEFAULT_REGION)
                        
                        echo "üìà Running instances: $RUNNING_INSTANCES"
                        if [ "$RUNNING_INSTANCES" -eq 4 ]; then
                            echo "‚úÖ All 4 instances are running (1 bastion + 3 Redis nodes)"
                        else
                            echo "‚ö†Ô∏è Expected 4 instances, found $RUNNING_INSTANCES"
                        fi
                        
                        echo "‚è≥ Additional wait for SSH services to be ready..."
                        sleep 60
                        
                        echo "‚úÖ Infrastructure readiness check completed"
                    '''
                }
            }
        }

        stage('Ansible Configuration') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                    expression { return !params.skipAnsible }
                }
            }
            steps {
                echo "=== Ansible Configuration ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "üîß Setting up Ansible environment..."
                        
                        # Ensure SSH key has correct permissions
                        if [ -f "${KEY_PAIR_NAME}.pem" ]; then
                            chmod 400 "${KEY_PAIR_NAME}.pem"
                            echo "‚úÖ SSH key permissions set"
                        else
                            echo "‚ö†Ô∏è SSH key file not found, may need manual configuration"
                        fi
                        
                        # Create clean inventory
                        echo "üìã Creating inventory..."
                        if [ -f "create-clean-inventory.sh" ]; then
                            chmod +x create-clean-inventory.sh
                            ./create-clean-inventory.sh
                        else
                            echo "‚ö†Ô∏è Clean inventory script not found, using fallback..."
                            # Fallback inventory creation
                            PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-public" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
                            PRIVATE_IPS=($(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-private*" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PrivateIpAddress' --output text))
                            
                            cat > inventory.ini << EOL
[redis_nodes]
redis-node-1 ansible_host=${PRIVATE_IPS[0]} ansible_user=ubuntu
redis-node-2 ansible_host=${PRIVATE_IPS[1]} ansible_user=ubuntu
redis-node-3 ansible_host=${PRIVATE_IPS[2]} ansible_user=ubuntu

[redis_nodes:vars]
ansible_ssh_private_key_file=./redis-infra-key.pem
ansible_ssh_common_args=-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -o ProxyCommand="ssh -W %h:%p -i ./redis-infra-key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP"
ansible_python_interpreter=/usr/bin/python3

[all:vars]
ansible_ssh_user=ubuntu
bastion_host=$PUBLIC_IP
EOL
                            echo "‚úÖ Fallback inventory created"
                        fi
                        
                        # Test connectivity
                        echo "üîó Testing Ansible connectivity..."
                        timeout 120 ansible all -i inventory.ini -m ping --timeout=30 || {
                            echo "‚ö†Ô∏è Initial connectivity test failed, retrying with verbose output..."
                            ansible all -i inventory.ini -m ping --timeout=60 -v || {
                                echo "‚ùå Connectivity test failed"
                                echo "üìã Troubleshooting info:"
                                echo "- Check security group rules for SSH access"
                                echo "- Verify instances are fully booted"
                                echo "- Ensure SSH key is correct"
                                
                                # Continue with limited functionality
                                echo "‚ö†Ô∏è Continuing with limited connectivity..."
                            }
                        }
                        
                        # Run Ansible playbook
                        echo "üöÄ Running Ansible playbook..."
                        ansible-playbook -i inventory.ini playbook.yml \
                            --extra-vars "bastion_host=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters 'Name=tag:Name,Values=redis-public' 'Name=instance-state-name,Values=running' --query 'Reservations[].Instances[].PublicIpAddress' --output text)" \
                            --timeout=120 -v || {
                            echo "‚ö†Ô∏è First attempt failed, retrying with increased timeout..."
                            sleep 30
                            ansible-playbook -i inventory.ini playbook.yml \
                                --extra-vars "bastion_host=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters 'Name=tag:Name,Values=redis-public' 'Name=instance-state-name,Values=running' --query 'Reservations[].Instances[].PublicIpAddress' --output text)" \
                                --timeout=180 -vv || {
                                echo "‚ùå Ansible playbook execution failed after retry"
                                echo "üìã Manual configuration may be required"
                                echo "‚ö†Ô∏è Continuing pipeline - infrastructure is deployed"
                            }
                        }
                        
                        echo "‚úÖ Ansible configuration stage completed"
                    '''
                }
            }
            post {
                always {
                    script {
                        if (fileExists('inventory.ini')) {
                            archiveArtifacts artifacts: 'inventory.ini', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Deployment Verification') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                echo "=== Deployment Verification ==="
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "üîç Verifying deployment..."
                        
                        echo "üìä Final infrastructure status:"
                        aws ec2 describe-instances \
                            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=redis-*" \
                            --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value|[0],State:State.Name,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,InstanceType:InstanceType}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "üåê Network configuration:"
                        aws ec2 describe-vpcs \
                            --filters "Name=tag:Name,Values=redis-VPC" \
                            --query 'Vpcs[].{VpcId:VpcId,CidrBlock:CidrBlock,State:State}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "üîí Security groups:"
                        aws ec2 describe-security-groups \
                            --filters "Name=group-name,Values=*redis*" \
                            --query 'SecurityGroups[].{GroupName:GroupName,GroupId:GroupId}' \
                            --output table --region $AWS_DEFAULT_REGION
                        
                        echo ""
                        echo "‚úÖ Deployment verification completed"
                    '''
                }
            }
        }

        stage('Generate Connection Guide') {
            when {
                allOf {
                    expression { return params.autoApprove }
                    expression { return params.action == 'apply' }
                }
            }
            steps {
                script {
                    sh '''
                        echo "üìã Generating connection guide..."
                        
                        # Get instance IPs
                        PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-public" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
                        PRIVATE_IPS=($(aws ec2 describe-instances --region $AWS_DEFAULT_REGION --filters "Name=tag:Name,Values=redis-private*" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].PrivateIpAddress' --output text))
                        
                        # Create comprehensive connection guide
                        cat > connection-guide.txt << EOF
üöÄ Redis Infrastructure Connection Guide
=======================================

‚úÖ Deployment Summary:
- Key Pair: ${KEY_PAIR_NAME}
- Region: ${AWS_DEFAULT_REGION}
- Deployment Time: $(date)
- Pipeline Build: ${BUILD_NUMBER}

üìä Instance Details:
- Bastion Host (Public): ${PUBLIC_IP}
- Redis Node 1 (Private): ${PRIVATE_IPS[0]}
- Redis Node 2 (Private): ${PRIVATE_IPS[1]}
- Redis Node 3 (Private): ${PRIVATE_IPS[2]}

üîó Connection Commands:

1. Connect to Bastion Host:
   ssh -i ${KEY_PAIR_NAME}.pem ubuntu@${PUBLIC_IP}

2. Connect to Redis Nodes (via Bastion):
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IPS[0]}
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IPS[1]}
   ssh -i ${KEY_PAIR_NAME}.pem -J ubuntu@${PUBLIC_IP} ubuntu@${PRIVATE_IPS[2]}

3. Test Redis Services:
   # Connect to any Redis node and test
   redis-cli -h ${PRIVATE_IPS[0]} ping
   redis-cli -h ${PRIVATE_IPS[1]} ping
   redis-cli -h ${PRIVATE_IPS[2]} ping

üîß Redis Cluster Configuration:
   # If cluster setup is needed, run on any Redis node:
   redis-cli --cluster create ${PRIVATE_IPS[0]}:6379 ${PRIVATE_IPS[1]}:6379 ${PRIVATE_IPS[2]}:6379 --cluster-replicas 0

üì• Available Artifacts:
- ${KEY_PAIR_NAME}.pem (SSH private key)
- terraform-outputs.json (Infrastructure details)
- inventory.ini (Ansible inventory)
- connection-guide.txt (This guide)

üéâ Deployment completed successfully!
EOF
                        
                        echo "‚úÖ Connection guide created"
                        cat connection-guide.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'connection-guide.txt', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== Pipeline Cleanup ==="
                
                // Archive important artifacts
                if (fileExists("${params.keyPairName}.pem")) {
                    archiveArtifacts artifacts: "${params.keyPairName}.pem", allowEmptyArchive: true
                }
                
                if (fileExists("terraform/terraform.tfstate")) {
                    archiveArtifacts artifacts: 'terraform/terraform.tfstate*', allowEmptyArchive: true
                }
                
                // Create build summary
                def buildSummary = """
=== Seamless SCM Pipeline Build Summary ===
Build Number: ${BUILD_NUMBER}
Build URL: ${BUILD_URL}
Action: ${params.action}
Key Pair: ${params.keyPairName}
Region: ${AWS_DEFAULT_REGION}
Completion Time: ${new Date()}
Duration: ${currentBuild.durationString}
Result: ${currentBuild.result ?: 'SUCCESS'}

Git Information:
- Repository: https://github.com/Shivik0505/New_Redis.git
- Commit: ${sh(returnStdout: true, script: 'git rev-parse HEAD 2>/dev/null || echo "N/A"').trim()}
- Branch: master

Pipeline Features:
- SCM Polling: H/5 * * * * (every 5 minutes)
- Automated infrastructure provisioning
- Ansible configuration management
- Comprehensive error handling
- Artifact generation and archiving
"""
                
                writeFile file: 'build-summary.txt', text: buildSummary
                archiveArtifacts artifacts: 'build-summary.txt', allowEmptyArchive: true
            }
            
            // Clean temporary files
            sh '''
                find . -name "*.log" -delete 2>/dev/null || true
                find . -name ".terraform" -type d -exec rm -rf {} + 2>/dev/null || true
            '''
        }
        
        success {
            echo 'üéâ Seamless SCM Pipeline completed successfully!'
            script {
                if (params.action == 'apply') {
                    echo """
‚úÖ Redis infrastructure deployed successfully!
üì• Download these artifacts:
   - ${params.keyPairName}.pem (SSH key for server access)
   - connection-guide.txt (Complete connection instructions)
   - terraform-outputs.json (Infrastructure details)
   - build-summary.txt (Build summary and details)

üîÑ SCM Polling is active - pipeline will automatically trigger on code changes every 5 minutes.
"""
                } else {
                    echo "üßπ Infrastructure destroyed successfully!"
                }
            }
        }
        
        failure {
            echo '‚ùå Seamless SCM Pipeline failed!'
            echo """
üîç Troubleshooting steps:
1. Check AWS credentials and permissions
2. Verify AWS service limits and quotas
3. Review console output for specific errors
4. Check security group configurations
5. Verify SSH key permissions and accessibility

üìã Common solutions:
- Run cleanup: terraform destroy
- Check AWS service limits
- Verify network connectivity
- Review Ansible inventory configuration
"""
        }
    }
}
